<div id="maincolumn">
    <p>Zestawienie 7 największych miast pod względem liczby mieszkańców.</p>
    <div class="chart"></div>
            <script type="text/javascript">
                        
            d3.json("/miasta/_design/default/_list/top/miasta/?myLimit=7", function(json) {
                var data = parseData(json); 
                var ratio = 0.5;

                var data_max = getMax(data),
                num_ticks = 5,

                left_margin = 100,
                right_margin = 60,
                top_margin = 30,
                bottom_margin = 0;
            
                var w = 450,
                h = 300;
                
                var x = d3.scale.linear()
                .domain([0, data_max])
                .range([0, (w - ( left_margin + right_margin ))]),
            
                y = d3.scale.ordinal()
                .domain(d3.range(data.length))
                .rangeBands([bottom_margin, h - top_margin], .5);

                var chart_top = h - y.rangeBand()/2 - top_margin;
                var chart_bottom = bottom_margin + y.rangeBand()/2;
                var chart_left = left_margin;
                var chart_right = w - right_margin;
                
                var color = function(d, i) { 
                    return (i % 2 == 0)? '#eeeeee' : '#cccccc' 
                }

                var vis = d3.select("div.chart")
                .append("svg:svg")
                .attr("width", w)
                .attr("height", h)
                .append("svg:g")
                .attr("id", "barchart")
                .attr("class", "barchart")
            
                var rules = vis.selectAll("g.rule")
                .data(x.ticks(num_ticks))
                .enter()
                .append("svg:g")
                .attr("transform", function(d)
                {
                    return "translate(" + (chart_left + x(d)) + ")";
                });

                rules.append("svg:line")
                .attr("class", "tick")
                .attr("y1", chart_top)
                .attr("y2", chart_top + 4)
                .attr("stroke", "black");

                rules.append("svg:text")
                .attr("class", "tick_label")
                .attr("text-anchor", "middle")
                .attr("style", "font: 10px sans-serif")
                .attr("y", chart_top)
                .text(function(d)
                {
                    return d;
                });


                var bbox = vis.selectAll(".tick_label").node().getBBox();
                vis.selectAll(".tick_label")
                .attr("transform", function(d)
                {
                    return "translate(0," + (bbox.height) + ")";
                });


                var bars = vis.selectAll("g.bar")
                .data(data)
                .enter()
                .append("svg:g")
                .attr("class", "bar")
                .attr("transform", function(d, i) { 
                    return "translate(0, " + y(i) + ")"; });

                bars.append("svg:rect")
                .attr("x", left_margin)
                .attr("width", function(d) {
                    return 1e-6;
                })
                .attr("height", y.rangeBand())
                .attr("fill",  color)
                .attr("stroke", color);
                
                var labels = vis.selectAll("g.bar")
                .append("svg:text")
                .attr("class", "label")
                .attr("x", 0)
                .attr("text-anchor", "right")
                .text(function(d) {
                    return d.label;
                });

                var bbox = labels.node().getBBox();
                vis.selectAll(".label")
                .attr("transform", function(d) {
                    return "translate(0, " + (y.rangeBand()/2 + bbox.height/4) + ")";
                });

                labels = vis.selectAll("g.bar")
                .append("svg:text")
                .attr("class", "value")
                .attr("x", function(d)
                {
                    return left_margin + 1e-6;
                    
                })
                .attr("text-anchor", "left")
                .text(function(d)
                {
                    return "" + d.value;
                });

                bbox = labels.node().getBBox();
                vis.selectAll(".value")
                .attr("transform", function(d)
                {
                    return "translate(0, " + (y.rangeBand()/2 + bbox.height/4) + ")";
                });
            
                vis.append("svg:line")
                .attr("class", "axes")
                .attr("x1", chart_left)
                .attr("x2", chart_left)
                .attr("y1", chart_bottom)
                .attr("y2", chart_top)
                .attr("stroke", "black");
                vis.append("svg:line")
                .attr("class", "axes")
                .attr("x1", chart_left)
                .attr("x2", chart_right)
                .attr("y1", chart_top)
                .attr("y2", chart_top)
                .attr("stroke", "black");
                
                redraw();
                     
                function redraw() {
                    
                    vis.selectAll("rect")
                    .transition()
                    .duration(2000)
                    .attr("width", function(d) {
                        return (x(d.value));
                    });
                    
                    vis.selectAll("g.bar").selectAll("text.value")
                    .transition()
                    .duration(2000)
                    .attr("x", function(d) {
                        return x(d.value) + right_margin;
                    })
                    
                }
                    
            });
            
            function parseData(json) {
                
                var length = json.length;
                var array_out = [];
                var element = false;
                for (var i = 0; i < length; i++) {
                    element = new Object();
                    element.label = json[i].value.nazwa;   
                    element.value = json[i].value.ludnosc;
                
                    array_out.push(element);
                }
                return array_out;
            }
            
            function getMax(data) {
                
                var length = data.length;
                
                var max = 0;
                for (var i = 0; i < length; i++) {
                    var value = parseInt(data[i].value);
                    max = (value > max) ? value : max;
                }
                return max;
            }
                
        </script>

</div>
